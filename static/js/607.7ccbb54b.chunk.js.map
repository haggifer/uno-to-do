{"version":3,"file":"static/js/607.7ccbb54b.chunk.js","mappings":"4RAKaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAQC,EAAAA,EAAAA,GAAeC,EAAAA,GAU7B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,SAAAC,GAAK,MAAK,CACjBC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,MAAO,OACPC,OAAQ,QACRC,WAAYP,EAAMQ,QAAQC,OAAOC,QAClC,EAAEC,SAAA,EACDC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACd,GAAI,SAAAC,GAAK,MAAK,CACxBc,GAAI,EACJC,SAAU,OACVC,WAAY,EACZC,MAAOjB,EAAMQ,QAAQC,OAAOS,kBAC7B,EAAEP,SAAC,yBAEJd,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CACPE,QAAS,OACT,2BAA4B,CAC1BkB,GAAI,IAENR,SAAA,EACAC,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACC,QA/BO,WACnB7B,GAAU,EACZ,EA6BqC8B,QAAQ,WAAWvB,GAAI,SAAAC,GAAK,MAAK,CAC9DiB,MAAOjB,EAAMQ,QAAQC,OAAOS,kBAC5BK,YAAavB,EAAMQ,QAAQC,OAAOS,kBAClC,UAAW,CACTK,aAAaC,EAAAA,EAAAA,IAAOxB,EAAMQ,QAAQC,OAAOS,kBAAmB,KAE/D,EAAEP,SAAC,2BACJd,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAACC,QAlCM,WAClB7B,EAAS,IACX,EAgCoC8B,QAAQ,WAAWvB,GAAI,SAAAC,GAAK,MAAK,CAC7DiB,MAAOjB,EAAMQ,QAAQC,OAAOS,kBAC5BK,YAAavB,EAAMQ,QAAQC,OAAOS,kBAClC,UAAW,CACTK,aAAaC,EAAAA,EAAAA,IAAOxB,EAAMQ,QAAQC,OAAOS,kBAAmB,KAE/D,EAAEP,SAAA,CAAC,WAASjB,EAAM+B,MAAQ,OAAS,gBAI5C,ECTA,EAxCkB,WAChB,IAAMC,GAASC,EAAAA,EAAAA,MAETC,GAAYjC,EAAAA,EAAAA,GAAekC,EAAAA,GAAaC,KACxCC,GAAYpC,EAAAA,EAAAA,GAAekC,EAAAA,GAAaG,MAExCC,GAAaC,EAAAA,EAAAA,UAAQ,WACzB,OAAOH,EAAUI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOC,OAAOZ,EAAOa,OAAO,GACjE,GAAG,CAACb,EAAOa,OAAQR,IAEbS,GAAkBN,EAAAA,EAAAA,UAAQ,WAC9B,OAAON,EAAUa,QAAO,SAAAC,GAAI,OAAIA,EAAKC,WAAsB,OAAVV,QAAU,IAAVA,OAAU,EAAVA,EAAYI,GAAE,GACjE,GAAG,CAACJ,EAAYL,IAEhBgB,GACEC,EAAAA,EAAAA,UAA+CC,EAAAA,GAAAA,IAAgBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAD1DK,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAGlCI,GACEN,EAAAA,EAAAA,UAA8CO,EAAAA,GAAAA,IAAeC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GADxDG,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAGhC,OACGpB,GAAeO,GAEd5B,EAAAA,EAAAA,KAAC4C,EAAAA,GAAS,CACRC,OAAQ,CACNC,MAAOzB,EAAW0B,KAClBV,YAAaA,EACbC,eAAgBA,EAChBI,WAAYA,EACZC,cAAeA,EACfK,UAAU,GAEZC,aAAcrB,EACdsB,eAAgB7B,EAChB8B,WAAYd,EAAYe,MACxBC,UAAWX,EAAWU,SAbxBpD,EAAAA,EAAAA,KAACrB,EAAY,GAgBnB,C","sources":["components/pages/private/tasks/ListNotFound.tsx","components/pages/private/tasks/ListTasks.tsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\r\nimport {Box, Button, darken, Typography} from \"@mui/material\";\r\nimport {useAppSelector} from \"../../../../redux/hooks\";\r\nimport {selectUsers} from \"../../../../redux/selectors/users\";\r\n\r\nexport const ListNotFound = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const users = useAppSelector(selectUsers)\r\n\r\n  const goToPrevPage = () => {\r\n    navigate(-1)\r\n  }\r\n\r\n  const goToDefault = () => {\r\n    navigate('/')\r\n  }\r\n\r\n  return (\r\n    <Box sx={theme => ({\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n      height: '100vh',\r\n      background: theme.palette.custom.tasksBg,\r\n    })}>\r\n      <Typography sx={theme => ({\r\n        mb: 4,\r\n        fontSize: '35px',\r\n        lineHeight: 1,\r\n        color: theme.palette.custom.contrastTextColor,\r\n      })}>Task list not found</Typography>\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        '& > *:not(:last-of-type)': {\r\n          mr: 2,\r\n        },\r\n      }}>\r\n        <Button onClick={goToPrevPage} variant=\"outlined\" sx={theme => ({\r\n          color: theme.palette.custom.contrastTextColor,\r\n          borderColor: theme.palette.custom.contrastTextColor,\r\n          '&:hover': {\r\n            borderColor: darken(theme.palette.custom.contrastTextColor, 0.2),\r\n          }\r\n        })}>Back to previous page</Button>\r\n        <Button onClick={goToDefault} variant=\"outlined\" sx={theme => ({\r\n          color: theme.palette.custom.contrastTextColor,\r\n          borderColor: theme.palette.custom.contrastTextColor,\r\n          '&:hover': {\r\n            borderColor: darken(theme.palette.custom.contrastTextColor, 0.2),\r\n          }\r\n        })}>Back to {users.token ? 'home' : 'login'}</Button>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}","import React, {useMemo, useState} from \"react\";\r\nimport {TasksPage} from \"./TasksPage\";\r\nimport {sortOptions, splitOptions, TasksSortOptionValue, TasksSplitOptionValue} from \"./TasksPageFilters\";\r\nimport {useAppSelector} from \"../../../../redux/hooks\";\r\nimport {selectTasks} from \"../../../../redux/selectors/tasks\";\r\nimport {ISelectOption} from \"../../../../typescript/common\";\r\nimport {useParams} from \"react-router\";\r\nimport {ListNotFound} from \"./ListNotFound\";\r\n\r\nconst ListTasks = () => {\r\n  const params = useParams()\r\n\r\n  const tasksData = useAppSelector(selectTasks).data!\r\n  const taskLists = useAppSelector(selectTasks).lists!\r\n\r\n  const targetList = useMemo(() => {\r\n    return taskLists.find(list => list.id === Number(params.listId))\r\n  }, [params.listId, taskLists])\r\n\r\n  const targetListTasks = useMemo(() => {\r\n    return tasksData.filter(task => task.list_id === targetList?.id)\r\n  }, [targetList, tasksData])\r\n\r\n  const [splitOption, setSplitOption] =\r\n    useState<ISelectOption<TasksSplitOptionValue>>(splitOptions[0])\r\n\r\n  const [sortOption, setSortOption] =\r\n    useState<ISelectOption<TasksSortOptionValue>>(sortOptions[0])\r\n\r\n  return (\r\n    !targetList || !targetListTasks ?\r\n      <ListNotFound/> :\r\n      <TasksPage\r\n        header={{\r\n          title: targetList.name,\r\n          splitOption: splitOption,\r\n          setSplitOption: setSplitOption,\r\n          sortOption: sortOption,\r\n          setSortOption: setSortOption,\r\n          controls: true,\r\n        }}\r\n        visibleTasks={targetListTasks}\r\n        targetTaskList={targetList}\r\n        splitValue={splitOption.value}\r\n        sortValue={sortOption.value}\r\n      />\r\n  )\r\n}\r\n\r\nexport default ListTasks"],"names":["ListNotFound","navigate","useNavigate","users","useAppSelector","selectUsers","_jsxs","Box","sx","theme","display","flexDirection","justifyContent","alignItems","width","height","background","palette","custom","tasksBg","children","_jsx","Typography","mb","fontSize","lineHeight","color","contrastTextColor","mr","Button","onClick","variant","borderColor","darken","token","params","useParams","tasksData","selectTasks","data","taskLists","lists","targetList","useMemo","find","list","id","Number","listId","targetListTasks","filter","task","list_id","_useState","useState","splitOptions","_useState2","_slicedToArray","splitOption","setSplitOption","_useState3","sortOptions","_useState4","sortOption","setSortOption","TasksPage","header","title","name","controls","visibleTasks","targetTaskList","splitValue","value","sortValue"],"sourceRoot":""}